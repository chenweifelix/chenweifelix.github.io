temp %>% mutate(across(select(., var1, var2), scale, scale = T)) %>% head()
#Standardize two variable
temp %>% mutate(across(select(var1, var2), scale, scale = T)) %>% head()
#Standardize two variable
temp %>% mutate(across(c(var1, var2)), scale, scale = T)) %>% head()
#Standardize two variable
temp %>% mutate(across(c(var1, var2), scale, scale = T)) %>% head()
#Standardize multiple variable
temp %>% mutate(temp = across(c(var1, var2), scale, scale = T)) %>% head()
#Standardize multiple variable
temp %>% mutate(across(c(var1, var2), scale, scale = T), "{.col}_{.fn}") %>% head()
#Standardize multiple variable
temp %>% mutate(across(c(var1, var2), scale, scale = T, "{.col}_{.fn}")) %>% head()
#Standardize multiple variable
temp %>% mutate(across(c(var1, var2), scale, scale = T)) %>% head()
#Standardize multiple variable
temp %>% mutate(across(c(var1, var2), scale, scale = T, .names = "mean_{.col}"))) %>% head()
#Standardize multiple variable
temp %>% mutate(across(c(var1, var2), scale, scale = T, .names = "mean_{.col}")) %>% head()
#Standardize multiple variable
temp %>% mutate(across(c(var1, var2), scale, scale = T, .names = "z_{.col}")) %>% head()
#Standardize multiple variable
temp %>% mutate(across(c(var1, var2), #select vars
scale, scale = T, #apply function
.names = "z_{.col}")) %>%  #name the vars (if default, old vars are replaced)
mutate(across(everything(), round, 3))
#Standardize multiple variable
temp %>% mutate(across(c(var1, var2), #select vars
scale, scale = T, #apply function
.names = "z_{.col}")) %>%  #name the vars (if default, old vars are replaced)
mutate(across(everything(), round, 3)) %>% head()
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[["var1"]])
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[["disp"]])
temp
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[[c("disp", "hp")]])
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[[c("disp", "hp")]])
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[[c("disp"]])
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[["disp"]])
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[["disp", "hp"]])
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[["disp"]])
#If vars are not already created
mtcars %>% summarize(mean_var1 = .[c("disp","hp")])
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(.data[["disp"]]))
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(.data[[c("disp","hp")]]))
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(.data[c("disp","hp")]))
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(.data[[c("disp","hp")]]))
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(.data[["disp","hp"]]))
temp %>% summarize(mean_var1 = mean(var1), sd_var1 = sd(var2),
mean_var2 = mean(var2), sd_var2 = sd(var2))
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(.data[["disp","hp"]]))
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(.data[["disp"]]))
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(rowMeans(select(.,disp,hp))))
temp %>% summarize(mean_var1 = mean(var1), sd_var1 = sd(var2),
mean_var2 = mean(var2), sd_var2 = sd(var2))
#If vars are not already created
mtcars %>% summarize(mean_var1 = mean(rowMeans(select(.,disp,hp))))
#Alternatively, if the vars are not already created
mtcars %>%
summarize(mean_var1 = mean(rowMeans(select(.,disp,hp))),
sd_var1 = sd(rowMeans(select(.,disp,hp))),
mean_var1 = mean(rowMeans(select(.,drat,wt))),
sd_var1 = sd(rowMeans(select(.,drat,wt))),)
#Alternatively, if the vars are not already created
mtcars %>%
summarize(mean_var1 = mean(rowMeans(select(.,disp,hp))),
sd_var1 = sd(rowMeans(select(.,disp,hp))),
mean_var2 = mean(rowMeans(select(.,drat,wt))),
sd_var2 = sd(rowMeans(select(.,drat,wt))),)
temp = mtcars %>% transmute(var1 = rowMeans(select(.,disp,hp)),
var2 = rowMeans(select(.,drat,wt)))
temp %>% head()
temp %>% summarize(mean_var1 = mean(var1), sd_var1 = sd(var2),
mean_var2 = mean(var2), sd_var2 = sd(var2))
#Alternatively, if the vars are not already created
mtcars %>%
summarize(mean_var1 = mean(rowMeans(select(.,disp,hp))),
sd_var1 = sd(rowMeans(select(.,disp,hp))),
mean_var2 = mean(rowMeans(select(.,drat,wt))),
sd_var2 = sd(rowMeans(select(.,drat,wt))),)
temp = mtcars %>% transmute(var1 = rowMeans(select(.,disp,hp)),
var2 = rowMeans(select(.,drat,wt)))
temp %>% head()
temp %>% summarize(mean_var1 = mean(var1), sd_var1 = sd(var1),
mean_var2 = mean(var2), sd_var2 = sd(var2))
#Alternatively, if the vars are not already created
mtcars %>%
summarize(mean_var1 = mean(rowMeans(select(.,disp,hp))),
sd_var1 = sd(rowMeans(select(.,disp,hp))),
mean_var2 = mean(rowMeans(select(.,drat,wt))),
sd_var2 = sd(rowMeans(select(.,drat,wt))),)
blogdown:::new_post_addin()
library(tidyverse)
library(hausekeep)
library(rstatix)
library(Hmisc)
library(ggsignif)
library(ggplot2)
library(ggpubr)
library(tidyverse)
install.packages("prettydoc")
#loading in packages
library(tidyverse)
#take a look at data
#loading in packages
library(tidyverse)
#take a look at data
install.packages("rmdformats")
#take a look at data
head(iris)
#loading in packages
library(tidyverse)
#take a look at data
head(iris)
str(iris)
iris %>%
mutate(Species = recode(Species,
setosa = "Setosa",
versicolor = "Versicolor"))
iris %>%
mutate(Species = recode(Species,
setosa = "Setosa",
versicolor = "Versicolor",
virginica = "Virginica"))
iris %>% select(Species)
iris %>%
mutate(Species = recode(Species,
setosa = "Setosa",
versicolor = "Versicolor",
virginica = "Virginica")) %>%
select(Species)
# Method 2 : Use regular expression
iris %>%
mutate(Species = stringr::str_to_lower(Species)) %>%
select(Species)
# Method 2 : Use regular expression
iris %>%
mutate(Species = stringr::str_to_title(Species)) %>%
select(Species)
iris %>% select(Species)
#Method 1: Manually recode each value
iris %>%
mutate(Species = recode(Species,
setosa = "Setosa",
versicolor = "Versicolor",
virginica = "Virginica")) %>%
select(Species)
# Method 2 : Use regular expression
iris %>%
mutate(Species = stringr::str_to_title(Species)) %>%
select(Species)
#loading in packages
library(tidyverse)
#take a look at data
head(iris) #built-in data in R
str(iris)
sumary(Sepal.Length ~ Species, iris)
summary(Sepal.Length ~ Species, iris)
summary(lm(Sepal.Length ~ Species, iris))
temp_df = iris %>% filter(! Species == Virginica)
iris %>% filter(! Species == Virginica)
temp_df = iris %>% filter(!Species == "Virginica")
summary(lm(Sepal.Length ~ Species, temp_df))
temp_df
temp_df = iris %>% filter(!Species == "virginica")
summary(lm(Sepal.Length ~ Species, temp_df))
temp_df = temp_df %>% mutate(Species = relevel(Species, ref = "versicolor"))
summary(lm(Sepal.Length ~ Species, temp_df))
#loading in packages
library(tidyverse)
#take a look at data
head(iris) #built-in data in R
str(iris)
iris %>% select(Species)
#Method 1: Manually recode each value
iris %>%
mutate(Species = recode(Species,
setosa = "Setosa",
versicolor = "Versicolor",
virginica = "Virginica")) %>%
select(Species)
# Method 2 : Use regular expression
iris %>%
mutate(Species = stringr::str_to_title(Species)) %>%
select(Species)
temp_df = iris %>% filter(!Species == "virginica")
summary(lm(Sepal.Length ~ Species, temp_df))
temp_df = temp_df %>% mutate(Species = relevel(Species, ref = "versicolor"))
summary(lm(Sepal.Length ~ Species, temp_df))
# Include values in the dataset
iris %>% bind_rows(c(999,999,999))
iris
# Include values in the dataset
tibble(Sepal.Length = 999, Sepal.Width = 999, Petal.Length = 999, Petal.Width = 999, Species = NA)
# Include values in the dataset
tibble(Sepal.Length = 999, Sepal.Width = 999, Petal.Length = 999, Petal.Width = 999, Species = NA) %>%
bind_rows(iris)
# Include values in the dataset
temp_df =
tibble(Sepal.Length = 999, Sepal.Width = 999, Petal.Length = 999, Petal.Width = 999, Species = NA) %>%
bind_rows(iris)
temp_df
# Include values in the dataset
temp_df =
tibble(Sepal.Length = 999, Sepal.Width = 999, Petal.Length = 999, Petal.Width = 999, Species = "NONE") %>%
bind_rows(iris)
temp_df
#
temp_df %>%
```
# Include values in the dataset
temp_df =
tibble(Sepal.Length = 999, Sepal.Width = 999, Petal.Length = 999, Petal.Width = 999, Species = "NONE") %>%
bind_rows(iris)
temp_df
#
temp_df %>%
mutate(recode(Sepal.Length, 999 = NA))
#
temp_df %>%
mutate(Sepal.Length = case_when(Sepal.Length == 999, NA,
T ~ Sepal.Length))
#
temp_df %>%
mutate(Sepal.Length = case_when(Sepal.Length == 999 ~ NA,
T ~ Sepal.Length))
#
temp_df %>%
mutate(Sepal.Length =
case_when(Sepal.Length == 999 ~ 1234,
T ~ Sepal.Length))
#
temp_df %>%
mutate(Sepal.Length =
case_when(Sepal.Length == 999 ~ NULL,
T ~ Sepal.Length))
#
temp_df %>%
mutate(Sepal.Length =
case_when(Sepal.Length == 999 ~ NaN,
T ~ Sepal.Length))
mutate(across(everything(), recode, 999 = NaN)
mutate(across(everything(), recode, "NONE" = NaN)
# Recode multiple variable
temp_df %>%
# Recode multiple variable
temp_df %>%
mutate(across(everything(), recode, "NONE" = NaN))
# Recode multiple variable
temp_df %>%
mutate(across(everything(), recode, "NONE" = NaN, .default = .))
# Recode multiple variable
temp_df %>%
mutate(across(everything(), recode, "NONE" = NaN, .default = everything()))
# Recode multiple variable
temp_df %>%
mutate(across(everything(), recode, "NONE" = NaN, .default = .data[[.]]))
# Recode multiple variables
df %>%
mutate_all(funs(str_replace(., "NONE", NaN)))
# Recode multiple variables
temp_df %>%
mutate_all(funs(str_replace(., "NONE", NaN)))
temp_df %>%
mutate( across(
.cols = everything(),
~recode( ., "NONE" = NaN, "" )
) )
temp_df %>%
mutate(across(
.cols = everything(),
~recode( ., "NONE" = NaN, .default = .)
))
temp_df %>% select(-Species) %>%
mutate(across(
.cols = everything(),
~recode( ., "NONE" = NaN, .default = . )
))
# Recode multiple variables
temp_df %>%
mutate_all(funs(str_replace(., "NONE", NaN)))
temp_df %>% select(-Species) %>%
mutate(across(
.cols = everything(),
~recode( ., 999 = NaN, .default = . )
temp_df %>% select(-Species) %>%
mutate(across(
.cols = everything(),
~recode( ., "NONE" = NaN,)
))
temp_df %>%
mutate(across(
.cols = everything(),
~recode( ., "NONE" = NaN)
))
temp_df %>% select(-Species) %>%
mutate(across(
.cols = everything(),
~recode( ., `999 = NaN)
))
temp_df %>% select(-Species) %>%
mutate(across(
.cols = everything(),
~recode( ., `999` = NaN)
temp_df %>% select(-Species) %>%
mutate(across(
.cols = everything(),
~recode( ., `999` = NaN)
))
temp_df %>%
mutate(across(
.cols = everything(),
~recode( ., "NONE" = NA_character_)
))
temp_df %>% select(Species)
temp_df %>% select(Species) %>%
mutate(across(
.cols = everything(),
~recode( ., "NONE" = NA_character_)
))
## Combine
temp_df %>%
mutate(across(is.character(), ~recode( ., "NONE" = NA_character_)))
## Combine
temp_df %>%
mutate(across(is.character(.), ~recode( ., "NONE" = NA_character_)))
is.character(temp_df)
## Combine
temp_df %>%
mutate(across(where(is.character()), ~recode( ., "NONE" = NA_character_)))
## Combine
temp_df %>%
mutate(across(where(is.character(.)), ~recode( ., "NONE" = NA_character_)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character()),
.fns = ~recode( ., "NONE" = NA_character_)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character()),
.fns = recode( ., "NONE" = NA_character_)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character()),
.fns = ~recode( ., "NONE" = NA_character_)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode( ., "NONE" = NA_character_)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode( ., `999` = NaN)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode( ., `999` = NA)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode( ., `999` = NaN)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NaN))) %>%
drop_na()
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NaN))) %>%
select(-Species) %>%
drop_na()
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NaN)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NaN))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NaN)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NaN)))
# Include values in the dataset
temp_df =
tibble(Sepal.Length = 999, Sepal.Width = 999, Petal.Length = 999, Petal.Width = 999, Species = "NONE") %>%
bind_rows(iris)
temp_df
# Recode one variable
temp_df %>%
mutate(Sepal.Length =
case_when(Sepal.Length == 999 ~ NaN,
T ~ Sepal.Length))
# Recode multiple variables
temp_df %>%
mutate_all(funs(str_replace(., "NONE", NaN)))
## If the vars are character
temp_df %>% select(Species) %>%
mutate(Species =
case_when(Species == "NONE" ~ NA_character_,
T ~ Species))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NA_integer_)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NA_complex_)))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NaN)))
# Include values in the dataset
temp_df =
tibble(Sepal.Length = 999, Sepal.Width = 999, Petal.Length = 999, Petal.Width = 999, Species = "NONE") %>%
bind_rows(iris)
temp_df
# Recode one variable
temp_df %>%
mutate(Sepal.Length =
case_when(Sepal.Length == 999 ~ NaN,
T ~ Sepal.Length))
## If the vars are character
temp_df %>% select(Species) %>%
mutate(Species =
case_when(Species == "NONE" ~ NA_character_,
T ~ Species))
## If the vars are numeric
temp_df %>% select(-Species) %>%
mutate(across(
.cols = everything(),
~recode( ., `999` = NaN)
))
## Combine
temp_df %>%
mutate(across(.cols = where(is.character),
.fns = ~recode( ., "NONE" = NA_character_))) %>%
mutate(across(.cols = where(is.numeric),
.fns = ~recode(., `999` = NaN)))
reticulate::repl_python()
runApp('content/blog/useful-code/data-wrangling-and-visualization/vis_apps/raincloud_plot/raincloud_plot')
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
library(blogdown)
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
source("~/Desktop/Academy/Website/my-website/web-inline-functions.R", echo=TRUE)
View(colored)
options(blogdown.method = "html")
print("hi")
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
