---
title: "Data Wranglingâ€”Python"
output: 
  html_notebook:
    toc: yes
    toc_float: 
      collapsed: false
    
    theme: readable
author: Felix Yu 
date: 2022-12-12 
---

# Basic setting

```{python}
#loading in packages 
import pandas as pd 
import numpy as np
from sklearn import datasets
#take a look at data 
iris = datasets.load_iris(return_X_y = True, as_frame = True)
iris = pd.concat([iris[0], iris[1]], axis = 1)
iris 
iris.info()
```

# Recode data values 

## Value 
If in the dataset, a specific value means missing data (e.g., 999), we need to recode it as such before putting the varables in the model
```{python}
# Include values in the dataset 
temp_df = pd.concat([
  pd.DataFrame({
    "sepal length (cm)" : [999], 
    "sepal width (cm)" : [999], 
    "petal length (cm)" : [999],
    "petal width (cm)" : [999],
    "target" : ["NONE"]}), 
  iris
  ]
  )

#Recode
temp_df.replace({
  999 : None,
  "NONE" : None
})

```

## Text 
Let's suppose we want `Species` to be coded with the first letter being captital. 

```{r}
iris %>% select(Species)
# Method 1: Manually recode each value 
iris %>% 
  mutate(Species = recode(Species, 
                          setosa = "Setosa", 
                          versicolor = "Versicolor", 
                          virginica = "Virginica")) %>% 
  select(Species)
# Method 2 : Use regular expression 
iris %>% 
  mutate(Species = stringr::str_to_title(Species)) %>% 
  select(Species)
```

## Relevel  

In linear regression, it is common for categorical variables to be dummy coded before being enterd in the model. To faciliate the interpretation of the regression coefficient, the reference point of the dummy variable is important. Here, let's consider the case of Species as a dummy variable. 

I first remove the level `virginica` and consider only the levels `setosa` and `versicolor` of this variable. 
```{r}
temp_df = iris %>% filter(!Species == "virginica")
summary(lm(Sepal.Length ~ Species, temp_df)) 
```
Judging from the model summary, I know that the model treats `setosa` as 0 and `versicolor` as 1. 

If, however, I would like to treat `versicolor` as 0 instead. 
```{r}
temp_df = temp_df %>% mutate(Species = relevel(Species, ref = "versicolor"))
summary(lm(Sepal.Length ~ Species, temp_df)) 
```

The model now treats `versicolor` as the reference point. The exact same absoule value of the regression coefficients confirms the reuslt. 

